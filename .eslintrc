{
  "env": {
    "browser": true
  },
  "parserOptions": {
    "ecmaVersion": 2020, // Allows for the parsing of modern ECMAScript features
    "sourceType": "module", // Allows for the use of imports
    "ecmaFeatures": {
      "jsx": true // Allows for the parsing of JSX
    }
  },
  "settings": {
    "react": {
      "version": "detect" // Tells eslint-plugin-react to automatically detect the version of React to use
    },
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx"]
      }
    }
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "next",
    "next/core-web-vitals",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended",
    // "simple-import-sort/imports",
    "plugin:import/warnings",
    // prettier should always be last
    "plugin:prettier/recommended" // Enables eslint-plugin-prettier and eslint-config-prettier. This will display prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
  ],
  "plugins": ["unused-imports", "import"],
  "ignorePatterns": [".next/", "node_modules/", "generated/"],
  "rules": {
    // React rules
    // Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs
    "react/react-in-jsx-scope": "off",
    "react/prop-types": 1,

    // Add a11y error for next/link accessibility
    "jsx-a11y/anchor-is-valid": [
      "error",
      {
        "components": ["Link"],
        "specialLink": ["hrefLeft", "hrefRight"],
        "aspects": ["invalidHref", "preferButton"]
      }
    ],

    // Import Rules
    // "simple-import-sort/imports": "error",
    // "simple-import-sort/exports": "error",
    "import/first": "error",
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",
    "no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "error",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],

    // Standard ESLint rules
    "no-console": 1,
    "no-plusplus": [2, { "allowForLoopAfterthoughts": true }],
    // "arrow-parens": [2, "as-needed", { "requireForBlockBody": true }],
    "comma-dangle": [2, "always-multiline"],
    "arrow-body-style": "off",
    "no-duplicate-imports": "error"
  },
  "overrides": [
    {
      "files": ["*"],
      "rules": {
        // "simple-import-sort/imports": [
        //   "error",
        //   {
        //     "groups": [
        //       // Node.js builtins. You could also generate this regex if you use a `.js` config.
        //       // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
        //       [
        //         "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)"
        //       ],
        //       // Packages. `react` related packages come first.
        //       ["^react", "^next", "^@?\\w"],
        //       // Internal packages.
        //       ["^(@|@company|@ui|components|utils|config|vendored-lib)(/.*|$)"],
        //       // Side effect imports.
        //       ["^\\u0000"],
        //       // Parent imports. Put `..` last.
        //       ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
        //       // Other relative imports. Put same-folder imports and `.` last.
        //       ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
        //       // Style imports.
        //       ["^.+\\.s?css$"]
        //     ]
        //   }
        // ]
      }
    }
  ]
}
